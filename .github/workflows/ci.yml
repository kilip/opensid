name: CI

on:
  push:
    branches: ['main']
    tags:
  pull_request:
    branches: ['main']

env:
  DOYO_CI: 1

jobs:
  php-cs-fixer:
    name: PHP-CS-Fixer (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8.0'
      fail-fast: false
    env:
      PHP_CS_FIXER_FUTURE_MODE: '1'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: intl, bcmath, curl, openssl, mbstring
          ini-values: memory_limit=-1
          tools: pecl, composer
          coverage: none
      - name: Cache Composer cache
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: composer-cache-php${{ matrix.php }}
      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress
        working-directory: api
      - name: Run PHP-CS-Fixer
        run: ./vendor/bin/php-cs-fixer fix --dry-run --diff --ansi
        working-directory: api

  # psalm
  psalm:
    name: Psalm (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8.0'
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: intl, bcmath, curl, openssl, mbstring
          ini-values: memory_limit=-1
          tools: pecl, composer
          coverage: none
      - name: Cache Composer cache
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: composer-cache-php${{ matrix.php }}
      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress
        working-directory: api
      - name: Run Psalm Tests
        run: ./vendor/bin/psalm --threads=2 --shepherd --stats
        working-directory: api

  # phpstan
  phpstan:
    name: PHPStan (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8.0'
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: intl, bcmath, curl, openssl, mbstring
          ini-values: memory_limit=-1
          tools: pecl, composer
          coverage: none
      - name: Cache Composer cache
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: composer-cache-php${{ matrix.php }}
      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress
        working-directory: api
      - name: Run PHP Stan Analysis
        run: ./vendor/bin/phpstan analyse --no-interaction --no-progress --ansi
        working-directory: api

  # build
  build:
    name: Build (Build Docker Image)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: |
            ${{ runner.o }}-buildx-${{ hashFiles('**/.github/workflows/ci.yml','**/docker-compose.yml','**/docker-compose.dev.yml','**/docker/Dockerfile','**/docker/pwa/Dockerfile', '**/pwa/package.json', '**/pwa/yarn.lock') }}
          restore-keys: ${{ runner.os }}-buildx-
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Pull images
        run: docker-compose pull --ignore-pull-failures || true
      - name: Start services
        run: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --build -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker-compose ps
                docker-compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      - name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost
      - name: Check HTTPS reachability
        run: curl  -vk -o /dev/null https://localhost
      - name: Stop services
        run: docker-compose stop
      - name: Lists existing image
        run: docker image ls
        continue-on-error: true
      - name: Push image
        run: |
          docker push ghcr.io/kilip/opensid/php-dev
          docker push ghcr.io/kilip/opensid/caddy-dev
          docker push ghcr.io/kilip/opensid/pwa-dev
        if: github.ref == 'refs/heads/main'

  behat:
    needs:
      - php-cs-fixer
      - psalm
      - phpstan
      - build
    name: 'Behat Testing'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: |
            ${{ runner.o }}-buildx-${{ hashFiles('**/.github/workflows/ci.yml','**/docker-compose.yml','**/docker-compose.dev.yml','**/docker/Dockerfile','**/docker/pwa/Dockerfile', '**/pwa/package.json', '**/pwa/yarn.lock') }}
          restore-keys: ${{ runner.os }}-buildx-
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Pull images
        run: docker-compose pull --ignore-pull-failures || true
      - name: Start services
        run: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker-compose ps
                docker-compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      - name: Prepare Tests
        run: |
          ./doyo symfony -e test doctrine:database:create
          ./doyo symfony -e test doctrine:migrations:migrate -n
          ./doyo symfony -e test doctrine:schema:create
      - name: Run Tests
        run: ./doyo behat --colors
      - name: Stop services
        run: docker-compose stop
      - name: Upload coverage results to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: ./api/build/clover/coverage-behat.xml
          name: behat-php
          flags: behat
          fail_ci_if_error: true

  phpunit:
    needs:
      - php-cs-fixer
      - psalm
      - phpstan
      - build
    name: 'PHPUnit Testing'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: |
            ${{ runner.o }}-buildx-${{ hashFiles('**/.github/workflows/ci.yml','**/docker-compose.yml','**/docker-compose.dev.yml','**/docker/Dockerfile','**/docker/pwa/Dockerfile', '**/pwa/package.json', '**/pwa/yarn.lock') }}
          restore-keys: ${{ runner.os }}-buildx-
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Pull images
        run: docker-compose pull --ignore-pull-failures || true
      - name: Start services
        run: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker-compose ps
                docker-compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      - name: Prepare Tests
        run: |
          ./doyo symfony -e test doctrine:database:create
          ./doyo symfony -e test doctrine:migrations:migrate -n
          ./doyo symfony -e test doctrine:schema:create
      - name: Run Tests
        run: ./doyo phpunit --colors --coverage-clover build/logs/clover.xml
      - name: Stop services
        run: docker-compose stop
      - name: Upload coverage results to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: ./api/build/logs/clover.xml
          name: phpunit-php
          flags: phpunit
          fail_ci_if_error: true

  phpspec:
    needs:
      - php-cs-fixer
      - psalm
      - phpstan
      - build
    name: 'PHPSpec Testing'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: |
            ${{ runner.o }}-buildx-${{ hashFiles('**/.github/workflows/ci.yml','**/docker-compose.yml','**/docker-compose.dev.yml','**/docker/Dockerfile','**/docker/pwa/Dockerfile', '**/pwa/package.json', '**/pwa/yarn.lock') }}
          restore-keys: ${{ runner.os }}-buildx-
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Pull images
        run: docker-compose pull --ignore-pull-failures || true
      - name: Start services
        run: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker-compose ps
                docker-compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      - name: Prepare Tests
        run: |
          ./doyo symfony -e test doctrine:database:create
          ./doyo symfony -e test doctrine:migrations:migrate -n
          ./doyo symfony -e test doctrine:schema:create
      - name: Run Tests
        run: ./doyo phpspec run --ansi -fpretty -c phpspec.coverage.yml
      - name: Stop services
        run: docker-compose stop
      - name: Upload coverage results to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: ./api/build/logs/phpspec.xml
          name: phpspec-php
          flags: phpspec
          fail_ci_if_error: true

  pwa:
    needs:
      - php-cs-fixer
      - psalm
      - phpstan
      - build
    name: 'Frontend Testing (PWA)'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
        with:
          key: |
            ${{ runner.o }}-buildx-${{ hashFiles('**/.github/workflows/ci.yml','**/docker-compose.yml','**/docker-compose.dev.yml','**/docker/Dockerfile','**/docker/pwa/Dockerfile', '**/pwa/package.json', '**/pwa/yarn.lock') }}
          restore-keys: ${{ runner.os }}-buildx-
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Pull images
        run: docker-compose pull --ignore-pull-failures || true
      - name: Start services
        run: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy)
                docker-compose ps
                docker-compose logs
                exit 1
              ;;
            esac
          done
          exit 1
      - name: Run Tests
        run: ./doyo yarn test
      - name: Stop services
        run: docker-compose stop
      - name: Upload coverage results to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: ./pwa/coverage/clover.xml
          name: pwa-node
          flags: pwa
          fail_ci_if_error: true
        continue-on-error: true

  # deploy
  #deploy:
  #  if: github.ref == 'refs/heads/main'
  #  needs:
  #    - phpspec
  #    - phpunit
  #    - behat
  #  runs-on: ubuntu-latest
  #  environment:
  #    name: production
  #  steps:
  #    - uses: actions/checkout@v2
  #    - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
  #      with:
  #        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  #        heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
  #        heroku_email: ${{secrets.HEROKU_EMAIL}}
  #        appdir: "api"
