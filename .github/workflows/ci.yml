name: CI

on:
  push:
    branches: ['main']
    tags:
  pull_request:
    branches: ['main']
env:
  COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SYMFONY_DEPRECATIONS_HELPER: disabled=1
  DATABASE_URL: "sqlite:///:memory:"

jobs:
  php-cs-fixer:
    name: PHP-CS-Fixer (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8.0'
      fail-fast: false
    env:
      PHP_CS_FIXER_FUTURE_MODE: '1'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: intl, bcmath, curl, openssl, mbstring
          ini-values: memory_limit=-1
          tools: pecl, composer
          coverage: none
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Composer cache
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: composer-cache-php${{ matrix.php }}
      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress
      - name: Run PHP-CS-Fixer
        run: ./vendor/bin/php-cs-fixer fix --dry-run --diff --ansi

  # psalm
  psalm:
    name: Psalm (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8.0'
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: intl, bcmath, curl, openssl, mbstring
          ini-values: memory_limit=-1
          tools: pecl, composer
          coverage: none
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Composer cache
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: composer-cache-php${{ matrix.php }}
      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress
      - name: Run Psalm Tests
        run: ./vendor/bin/psalm --threads=2 --shepherd --stats

  # phpstan
  phpstan:
    name: PHPStan (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        php:
          - '8.0'
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: intl, bcmath, curl, openssl, mbstring
          ini-values: memory_limit=-1
          tools: pecl, composer
          coverage: none
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Composer cache
        uses: actions/cache@v2
        with:
          path: ~/.composer/cache
          key: composer-cache-php${{ matrix.php }}
      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress
      - name: Run PHP Stan Analysis
        run: ./vendor/bin/phpstan analyse --no-interaction --no-progress --ansi

  # phpspec
  phpspec:
    name: PHPSpec (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
        include:
          - php: '8.0'
            coverage: true
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_pgsql
          coverage: pcov
          ini-values: memory_limit=-1
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Enable code coverage
        if: matrix.coverage
        run: echo "COVERAGE=1" >> $GITHUB_ENV
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Create build dir
        if: matrix.coverage
        run: mkdir -p build/logs
      - name: Run PHPSpec tests
        run: |
          if [ "$COVERAGE" = '1' ]; then
            ./vendor/bin/phpspec run -fpretty --ansi -c phpspec.coverage.yml
          else
            ./vendor/bin/phpspec run -fpretty --ansi
          fi
      - name: Upload coverage results to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v1
        with:
          files: ./build/logs/coverage-phpspec.xml
          name: phpspec-php${{ matrix.php }}
          flags: phpspec
          fail_ci_if_error: false

  # phpunit
  phpunit:
    name: PHPUnit (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
        include:
          - php: '8.0'
            coverage: true
      fail-fast: false
    services:
      mysql:
        image: mariadb:10.5.9
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: opensid
        ports:
          - 3306:3306
    env:
      DATABASE_URL: mysql://root:root@127.0.0.1/opensid
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_pgsql
          coverage: pcov
          ini-values: memory_limit=-1
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Enable code coverage
        if: matrix.coverage
        run: echo "COVERAGE=1" >> $GITHUB_ENV
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Prepare Test
        run: |
          ./bin/console -e test doctrine:database:create
          ./bin/console -e test doctrine:schema:create
      - name: Create build dir
        if: matrix.coverage
        run: mkdir -p build/logs
      - name: Run PHPUnit tests
        run: |
          if [ "$COVERAGE" = '1' ]; then
            ./vendor/bin/phpunit --coverage-clover build/logs/coverage-phpunit.xml
          else
            ./vendor/bin/phpunit
          fi
      - name: Upload coverage results to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v1
        with:
          files: ./build/logs/coverage-phpunit.xml
          name: phpunit-php${{ matrix.php }}
          flags: phpunit
          fail_ci_if_error: false

  # behat
  behat:
    name: Behat (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
        include:
          - php: '8.0'
            coverage: true
      fail-fast: false
    services:
      mysql:
        image: mariadb:10.5.9
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: opensid
        ports:
          - 3306:3306
    env:
      DATABASE_URL: mysql://root:root@127.0.0.1/opensid
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: pecl, composer
          extensions: intl, bcmath, curl, openssl, mbstring, pdo_pgsql
          coverage: pcov
          ini-values: memory_limit=-1
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Enable code coverage
        if: matrix.coverage
        run: echo "COVERAGE=1" >> $GITHUB_ENV
      - name: Update project dependencies
        run: composer update --no-interaction --no-progress --ansi
      - name: Prepare Test
        run: |
          ./bin/console -e test doctrine:database:create
          ./bin/console -e test doctrine:schema:create
      - name: Create build dir
        if: matrix.coverage
        run: mkdir -p build/logs
      - name: Run Behat tests
        run: |
          if [ "$COVERAGE" = '1' ]; then
            ./vendor/bin/behat -fprogress --colors --no-interaction --profile=coverage
          else
            ./vendor/bin/behat -fprogress --colors --no-interaction
          fi
      - name: Upload coverage results to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v1
        with:
          files: ./build/logs/coverage-behat.xml
          name: behat-php${{ matrix.php }}
          flags: behat
          fail_ci_if_error: false

  # jest
  jest:
    name: Jest (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node:
          - '14'
          - '16'
        include:
          - node: '16'
            coverage: true
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          cache: 'yarn'
          cache-dependency-path: pwa/yarn.lock
      - name: Install dependencies
        run: yarn
        working-directory: pwa
      - name: Enable code coverage
        if: matrix.coverage
        run: echo "COVERAGE=1" >> $GITHUB_ENV
      - name: Running tests
        run: |
          if [ "$COVERAGE" = '1' ]; then
            yarn test
          else
            yarn test --coverage=false
          fi
        working-directory: pwa
      - name: Upload coverage results to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v1
        with:
          files: ./pwa/coverage/clover.xml
          name: jest-node${{ matrix.node }}
          flags: jest
          fail_ci_if_error: false

  # deploy
  #deploy:
  #  if: github.ref == 'refs/heads/main'
  #  needs:
  #    - phpspec
  #    - phpunit
  #    - behat
  #  runs-on: ubuntu-latest
  #  environment:
  #    name: production
  #  steps:
  #    - uses: actions/checkout@v2
  #    - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
  #      with:
  #        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  #        heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
  #        heroku_email: ${{secrets.HEROKU_EMAIL}}
  #        appdir: "api"
